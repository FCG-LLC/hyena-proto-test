# This file verifies that C++ can parse replies sent by Hyena
Hyena -> C++


## List columns
# No columns
-c columns                                   -> ListColumnReply {columns=[]}
# All data types
-c columns -n AColumnName -i 1 -t I8Dense    -> ListColumnReply {columns=[Column(1, "AColumnName", I8Dense), ]}
-c columns -n AColumnName -i 1 -t I16Dense   -> ListColumnReply {columns=[Column(1, "AColumnName", I16Dense), ]}
-c columns -n AColumnName -i 1 -t I32Dense   -> ListColumnReply {columns=[Column(1, "AColumnName", I32Dense), ]}
-c columns -n AColumnName -i 1 -t I64Dense   -> ListColumnReply {columns=[Column(1, "AColumnName", I64Dense), ]}
-c columns -n AColumnName -i 1 -t I128Dense  -> ListColumnReply {columns=[Column(1, "AColumnName", I128Dense), ]}
-c columns -n AColumnName -i 1 -t U8Dense    -> ListColumnReply {columns=[Column(1, "AColumnName", U8Dense), ]}
-c columns -n AColumnName -i 1 -t U16Dense   -> ListColumnReply {columns=[Column(1, "AColumnName", U16Dense), ]}
-c columns -n AColumnName -i 1 -t U32Dense   -> ListColumnReply {columns=[Column(1, "AColumnName", U32Dense), ]}
-c columns -n AColumnName -i 1 -t U64Dense   -> ListColumnReply {columns=[Column(1, "AColumnName", U64Dense), ]}
-c columns -n AColumnName -i 1 -t U128Dense  -> ListColumnReply {columns=[Column(1, "AColumnName", U128Dense), ]}
-c columns -n AColumnName -i 1 -t I8Sparse   -> ListColumnReply {columns=[Column(1, "AColumnName", I8Sparse), ]}
-c columns -n AColumnName -i 1 -t I16Sparse  -> ListColumnReply {columns=[Column(1, "AColumnName", I16Sparse), ]}
-c columns -n AColumnName -i 1 -t I32Sparse  -> ListColumnReply {columns=[Column(1, "AColumnName", I32Sparse), ]}
-c columns -n AColumnName -i 1 -t I64Sparse  -> ListColumnReply {columns=[Column(1, "AColumnName", I64Sparse), ]}
-c columns -n AColumnName -i 1 -t I128Sparse -> ListColumnReply {columns=[Column(1, "AColumnName", I128Sparse), ]}
-c columns -n AColumnName -i 1 -t U8Sparse   -> ListColumnReply {columns=[Column(1, "AColumnName", U8Sparse), ]}
-c columns -n AColumnName -i 1 -t U16Sparse  -> ListColumnReply {columns=[Column(1, "AColumnName", U16Sparse), ]}
-c columns -n AColumnName -i 1 -t U32Sparse  -> ListColumnReply {columns=[Column(1, "AColumnName", U32Sparse), ]}
-c columns -n AColumnName -i 1 -t U64Sparse  -> ListColumnReply {columns=[Column(1, "AColumnName", U64Sparse), ]}
-c columns -n AColumnName -i 1 -t U128Sparse -> ListColumnReply {columns=[Column(1, "AColumnName", U128Sparse), ]}
# Column name with spaces
-c columns -n "A Column name" -i 1 -t I8Dense    -> ListColumnReply {columns=[Column(1, "A Column name", I8Dense), ]}
# UTF-8 column names
-c columns -n "Zażółć" -i 1 -t I8Dense           -> ListColumnReply {columns=[Column(1, "Zażółć", I8Dense), ]}
# Multiple columns
-c columns -n col1 -i 1 -t I8Dense -n col2 -i 2 -t U16Sparse    -> ListColumnReply {columns=[Column(1, "col1", I8Dense), Column(2, "col2", U16Sparse), ]}
-c columns -n col1 -i 10 -t U128Sparse -n col2 -i 1 -t I16Dense -> ListColumnReply {columns=[Column(10, "col1", U128Sparse), Column(1, "col2", I16Dense), ]}


## Get catalog
# No columns
-c catalog -> RefreshCatalogReply {columns=[], partitions=#0}
# All data types
-c catalog -p 1 -n AColumnName -i 1 -t I8Dense    -> RefreshCatalogReply {columns=[Column(1, "AColumnName", I8Dense), ], partitions=#1}
-c catalog -p 1 -n AColumnName -i 1 -t I16Dense   -> RefreshCatalogReply {columns=[Column(1, "AColumnName", I16Dense), ], partitions=#1}
-c catalog -p 1 -n AColumnName -i 1 -t I32Dense   -> RefreshCatalogReply {columns=[Column(1, "AColumnName", I32Dense), ], partitions=#1}
-c catalog -p 1 -n AColumnName -i 1 -t I64Dense   -> RefreshCatalogReply {columns=[Column(1, "AColumnName", I64Dense), ], partitions=#1}
-c catalog -p 1 -n AColumnName -i 1 -t I128Dense  -> RefreshCatalogReply {columns=[Column(1, "AColumnName", I128Dense), ], partitions=#1}
-c catalog -p 1 -n AColumnName -i 1 -t U8Dense    -> RefreshCatalogReply {columns=[Column(1, "AColumnName", U8Dense), ], partitions=#1}
-c catalog -p 1 -n AColumnName -i 1 -t U16Dense   -> RefreshCatalogReply {columns=[Column(1, "AColumnName", U16Dense), ], partitions=#1}
-c catalog -p 1 -n AColumnName -i 1 -t U32Dense   -> RefreshCatalogReply {columns=[Column(1, "AColumnName", U32Dense), ], partitions=#1}
-c catalog -p 1 -n AColumnName -i 1 -t U64Dense   -> RefreshCatalogReply {columns=[Column(1, "AColumnName", U64Dense), ], partitions=#1}
-c catalog -p 1 -n AColumnName -i 1 -t U128Dense  -> RefreshCatalogReply {columns=[Column(1, "AColumnName", U128Dense), ], partitions=#1}
-c catalog -p 1 -n AColumnName -i 1 -t I8Sparse   -> RefreshCatalogReply {columns=[Column(1, "AColumnName", I8Sparse), ], partitions=#1}
-c catalog -p 1 -n AColumnName -i 1 -t I16Sparse  -> RefreshCatalogReply {columns=[Column(1, "AColumnName", I16Sparse), ], partitions=#1}
-c catalog -p 1 -n AColumnName -i 1 -t I32Sparse  -> RefreshCatalogReply {columns=[Column(1, "AColumnName", I32Sparse), ], partitions=#1}
-c catalog -p 1 -n AColumnName -i 1 -t I64Sparse  -> RefreshCatalogReply {columns=[Column(1, "AColumnName", I64Sparse), ], partitions=#1}
-c catalog -p 1 -n AColumnName -i 1 -t I128Sparse -> RefreshCatalogReply {columns=[Column(1, "AColumnName", I128Sparse), ], partitions=#1}
-c catalog -p 1 -n AColumnName -i 1 -t U8Sparse   -> RefreshCatalogReply {columns=[Column(1, "AColumnName", U8Sparse), ], partitions=#1}
-c catalog -p 1 -n AColumnName -i 1 -t U16Sparse  -> RefreshCatalogReply {columns=[Column(1, "AColumnName", U16Sparse), ], partitions=#1}
-c catalog -p 1 -n AColumnName -i 1 -t U32Sparse  -> RefreshCatalogReply {columns=[Column(1, "AColumnName", U32Sparse), ], partitions=#1}
-c catalog -p 1 -n AColumnName -i 1 -t U64Sparse  -> RefreshCatalogReply {columns=[Column(1, "AColumnName", U64Sparse), ], partitions=#1}
-c catalog -p 1 -n AColumnName -i 1 -t U128Sparse -> RefreshCatalogReply {columns=[Column(1, "AColumnName", U128Sparse), ], partitions=#1}
# Many partitions
-c catalog -p 100 -n AColumnName -i 1 -t I8Dense    -> RefreshCatalogReply {columns=[Column(1, "AColumnName", I8Dense), ], partitions=#100}
-c catalog -p 1000 -n AColumnName -i 1 -t I8Dense    -> RefreshCatalogReply {columns=[Column(1, "AColumnName", I8Dense), ], partitions=#1000}
# Many columns
-c catalog -p 128 -n col1 -i 10 -t U128Sparse -n col2 -i 1 -t I16Dense -> RefreshCatalogReply {columns=[Column(10, "col1", U128Sparse), Column(1, "col2", I16Dense), ], partitions=#128}


## Add column
# Success response
-c addcolumn -i 120 -> AddColumnReply {id=120}
# Error response, all error types
-c addcolumn -e ColumnNameAlreadyExists -w comment -> AddColumnReply {error="Column name already exists (comment)"}
-c addcolumn -e ColumnIdAlreadyExists   -w 10 -> AddColumnReply {error="Column id already exists (id: 10)"}
-c addcolumn -e ColumnNameCannotBeEmpty -w comment -> AddColumnReply {error="Column name cannot be empty"}
-c addcolumn -e NoData                  -w comment -> AddColumnReply {error="No data (comment)"}
-c addcolumn -e InconsistentData        -w comment -> AddColumnReply {error="Inconsistent data (comment)"}
-c addcolumn -e InvalidScanRequest      -w comment -> AddColumnReply {error="Invalid scan request (comment)"}
-c addcolumn -e CatalogError            -w comment -> AddColumnReply {error="Catalog error (comment)"}
-c addcolumn -e ScanError               -w comment -> AddColumnReply {error="Scan error (comment)"}
-c addcolumn -e Unknown                 -w comment -> AddColumnReply {error="Unknown error (comment)"}


## Insert
# Success response
-c insert -r 120 -> InsertReply {num=120}
# Error response, all error types
-c insert -e ColumnNameAlreadyExists -w comment -> InsertReply {error="Column name already exists (comment)"}
-c insert -e ColumnIdAlreadyExists   -w 10 -> InsertReply {error="Column id already exists (id: 10)"}
-c insert -e ColumnNameCannotBeEmpty -w comment -> InsertReply {error="Column name cannot be empty"}
-c insert -e NoData                  -w comment -> InsertReply {error="No data (comment)"}
-c insert -e InconsistentData        -w comment -> InsertReply {error="Inconsistent data (comment)"}
-c insert -e InvalidScanRequest      -w comment -> InsertReply {error="Invalid scan request (comment)"}
-c insert -e CatalogError            -w comment -> InsertReply {error="Catalog error (comment)"}
-c insert -e ScanError               -w comment -> InsertReply {error="Scan error (comment)"}
-c insert -e Unknown                 -w comment -> InsertReply {error="Unknown error (comment)"}


## Scan
# Error response, all error types
-c scan -e ColumnNameAlreadyExists -w comment -> ScanReply {error="Column name already exists (comment)"}
-c scan -e ColumnIdAlreadyExists   -w 10 -> ScanReply {error="Column id already exists (id: 10)"}
-c scan -e ColumnNameCannotBeEmpty -w comment -> ScanReply {error="Column name cannot be empty"}
-c scan -e NoData                  -w comment -> ScanReply {error="No data (comment)"}
-c scan -e InconsistentData        -w comment -> ScanReply {error="Inconsistent data (comment)"}
-c scan -e InvalidScanRequest      -w comment -> ScanReply {error="Invalid scan request (comment)"}
-c scan -e CatalogError            -w comment -> ScanReply {error="Catalog error (comment)"}
-c scan -e ScanError               -w comment -> ScanReply {error="Scan error (comment)"}
-c scan -e Unknown                 -w comment -> ScanReply {error="Unknown error (comment)"}
# No data
-c scan -i 0 -t U64Dense -d 0   -> ScanReply {data=[{id=0, type=U64Dense, block=no-data}, ]}
-c scan -i 0 -t U64Dense -d 0 -i 1 -t I8Sparse -d 0 -i 256 -t U128Sparse -d 0  -> ScanReply {data=[{id=0, type=U64Dense, block=no-data}, {id=1, type=I8Sparse, block=no-data}, {id=256, type=U128Sparse, block=no-data}, ]}
# All column types
-c scan -i 0 -t I8Dense -d 1      -> ScanReply {data=[{id=0, type=I8Dense, block=#1}, ]}
-c scan -i 0 -t I16Dense -d 1     -> ScanReply {data=[{id=0, type=I16Dense, block=#1}, ]}
-c scan -i 0 -t I32Dense -d 1     -> ScanReply {data=[{id=0, type=I32Dense, block=#1}, ]}
-c scan -i 0 -t I64Dense -d 1     -> ScanReply {data=[{id=0, type=I64Dense, block=#1}, ]}
# Not implemented yet
# -c scan -i 0 -t I128Dense -d 1  -> ScanReply {data=[{id=0, type=I128Dense, block=#1}, ]}
-c scan -i 0 -t U8Dense -d 1      -> ScanReply {data=[{id=0, type=U8Dense, block=#1}, ]}
-c scan -i 0 -t U16Dense -d 1     -> ScanReply {data=[{id=0, type=U16Dense, block=#1}, ]}
-c scan -i 0 -t U32Dense -d 1     -> ScanReply {data=[{id=0, type=U32Dense, block=#1}, ]}
-c scan -i 0 -t U64Dense -d 1     -> ScanReply {data=[{id=0, type=U64Dense, block=#1}, ]}
# Not implemented yet
# -c scan -i 0 -t U128Dense -d 1  -> ScanReply {data=[{id=0, type=U128Dense, block=#1}, ]}
-c scan -i 0 -t I8Sparse -d 1     -> ScanReply {data=[{id=0, type=I8Sparse, block=#1}, ]}
-c scan -i 0 -t I16Sparse -d 1    -> ScanReply {data=[{id=0, type=I16Sparse, block=#1}, ]}
-c scan -i 0 -t I32Sparse -d 1    -> ScanReply {data=[{id=0, type=I32Sparse, block=#1}, ]}
-c scan -i 0 -t I64Sparse -d 1    -> ScanReply {data=[{id=0, type=I64Sparse, block=#1}, ]}
# Not implemented yet
# -c scan -i 0 -t I128Sparse -d 1  -> ScanReply {data=[{id=0, type=I128Sparse, block=#1}, ]}
-c scan -i 0 -t U8Sparse -d 1     -> ScanReply {data=[{id=0, type=U8Sparse, block=#1}, ]}
-c scan -i 0 -t U16Sparse -d 1    -> ScanReply {data=[{id=0, type=U16Sparse, block=#1}, ]}
-c scan -i 0 -t U32Sparse -d 1    -> ScanReply {data=[{id=0, type=U32Sparse, block=#1}, ]}
-c scan -i 0 -t U64Sparse -d 1    -> ScanReply {data=[{id=0, type=U64Sparse, block=#1}, ]}
# Not implemented yet
# -c scan -i 0 -t U128Sparse -d 1  -> ScanReply {data=[{id=0, type=U128Sparse, block=#1}, ]}
# Different amount of data, single column
-c scan -i 0 -t U8Sparse -d 5     -> ScanReply {data=[{id=0, type=U8Sparse, block=#5}, ]}
-c scan -i 0 -t I64Dense -d 50    -> ScanReply {data=[{id=0, type=I64Dense, block=#50}, ]}
-c scan -i 0 -t U8Sparse -d 5000  -> ScanReply {data=[{id=0, type=U8Sparse, block=#5000}, ]}
# Different amount of data, multiple columns
-c scan -i 0 -t U64Dense -d 10 -i 1 -t I8Sparse -d 100 -i 256 -t U64Sparse -d 1000  -> ScanReply {data=[{id=0, type=U64Dense, block=#10}, {id=1, type=I8Sparse, block=#100}, {id=256, type=U64Sparse, block=#1000}, ]}
